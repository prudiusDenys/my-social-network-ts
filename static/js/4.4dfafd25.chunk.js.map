{"version":3,"sources":["components/Sidebar/Navbar/Dialogs/Dialogs.module.css","components/Sidebar/Navbar/Dialogs/AllMessages/AllMessages.module.css","components/Sidebar/Navbar/Dialogs/AllMessages/ListMessages/ListMessages.module.css","components/Sidebar/Navbar/Dialogs/Contacts/Contacts.module.css","components/Sidebar/Navbar/Dialogs/Contacts/ContactUser/ContactUser.module.css","components/Sidebar/Navbar/Dialogs/AllMessages/ListMessages/ListMessages.tsx","components/Sidebar/Navbar/Dialogs/AllMessages/AllMessages.tsx","components/Sidebar/Navbar/Dialogs/AllMessages/AllMessagesContainer.tsx","components/Sidebar/Navbar/Dialogs/Contacts/ContactUser/ContactUser.tsx","components/Sidebar/Navbar/Dialogs/Contacts/Contacts.tsx","components/Sidebar/Navbar/Dialogs/Contacts/ContactsContainer.tsx","components/Sidebar/Navbar/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Sidebar/Navbar/Dialogs/DialogsContainer.tsx"],"names":["module","exports","ListMessages","props","sentMessageElement","sentMessages","map","t","key","id","className","classes","sentMessage","sender","text","gotMessageElement","gotMessages","gotMessage","guess","fullName","listMessages","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","message","Field","component","Textarea","validate","requiredField","name","placeholder","AllMessages","dispatch","useDispatch","allMessages","title","formData","addMessage","newMessageBody","reset","AllMessagesContainer","connect","state","dialogs","newMessageText","messageValue","addMessageActionCreator","ContactUser","contactUserList","avatar","src","avatarUrl","alt","contactUser","contactUserLink","to","activeClassName","active","Contacts","contactElement","contactsData","c","contactsList","contactsListTitle","ContactsContainer","Dialogs","dialogsBox","mapStateToPropsForRedirect","isAuth","auth","compose","Component","RedirectComponent","this","React"],"mappings":"yHACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,WAAa,8B,oBCA9DD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,QAAU,+B,oBCA9GD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,YAAc,kCAAkC,OAAS,6BAA6B,MAAQ,4BAA4B,WAAa,mC,oBCA3MD,EAAOC,QAAU,CAAC,aAAe,+BAA+B,kBAAoB,sC,oBCApFD,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,gBAAkB,qCAAqC,OAAS,4BAA4B,OAAS,8B,2HCwC/JC,EA/BM,SAACC,GAErB,IAAIC,EAAqBD,EAAME,aAAaC,KAAI,SAAAC,GAC/C,OACC,yBAAKC,IAAKD,EAAEE,GAAIC,UAAWC,IAAQC,aAClC,uBAAGF,UAAWC,IAAQE,QAAtB,OACK,6BACHN,EAAEO,UAKHC,EAAoBZ,EAAMa,YAAYV,KAAI,SAAAC,GAC7C,OACC,yBAAKC,IAAKD,EAAEE,GAAIC,UAAWC,IAAQM,YAClC,uBAAGP,UAAWC,IAAQO,OACpBX,EAAEY,SADJ,IACc,6BACZZ,EAAEO,UAMP,OACC,yBAAKJ,UAAWC,IAAQS,cACtBhB,EACAW,I,kDCbEM,EAAeC,YAAiB,KAsChCC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAZuC,SAACrB,GACnE,OACC,0BAAMuB,SAAUvB,EAAMwB,aAAcjB,UAAWC,IAAQiB,SACrD,6BACC,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACdC,SAAU,CAACC,IAAcZ,GAAea,KAAM,iBAAkBC,YAAa,oBACjF,qDAQUC,EAtCK,SAACjC,GAEpB,IAAMkC,EAAWC,cAOjB,OACC,yBAAK5B,UAAWC,IAAQ4B,aACvB,yBAAK7B,UAAWC,IAAQ6B,OAAxB,sBAGA,yBAAK9B,UAAWC,IAAQiB,SACvB,kBAACL,EAAD,CAAqBG,SAXJ,SAACe,GACnBtC,EAAMuC,WAAWD,EAASE,gBAC3BN,EAASO,YAAM,6BAWd,kBAAC,EAAD,CAAcvC,aAAcF,EAAME,aAC3BW,YAAab,EAAMa,gBClBd6B,EAFcC,aAhBP,SAACC,GACtB,MAAO,CACN/B,YAAa+B,EAAMC,QAAQhC,YAC3BiC,eAAgBF,EAAMC,QAAQC,eAC9B5C,aAAc0C,EAAMC,QAAQ3C,iBAIL,SAACgC,GACzB,MAAO,CACNK,WAAY,SAACQ,GACZb,EAASc,YAAwBD,QAKPJ,CAA6CV,G,4CCG3DgB,EAfK,SAACjD,GACpB,OACC,yBAAKK,IAAKL,EAAMM,GAAIC,UAAWC,IAAQ0C,iBACtC,yBAAK3C,UAAWC,IAAQ2C,QACvB,yBAAKC,IAAKpD,EAAMqD,UAAWC,IAAI,MAEhC,yBAAK/C,UAAWC,IAAQ+C,aACvB,kBAAC,IAAD,CAAShD,UAAWC,IAAQgD,gBAAiBC,GAAE,mBAAczD,EAAMM,IAC9DoD,gBAAiBlD,IAAQmD,QAAS3D,EAAM+B,SCClC6B,EAXE,SAAC5D,GACd,IAAI6D,EAAiB7D,EAAM8D,aAAa3D,KAAI,SAAA4D,GAAC,OAAE,kBAAC,EAAD,CAAa1D,IAAK0D,EAAEzD,GAAIA,GAAIyD,EAAEzD,GAAIyB,KAAMgC,EAAEhC,KAAMsB,UAAWU,EAAEV,eAC5G,OACC,yBAAK9C,UAAWC,IAAQwD,cACvB,yBAAKzD,UAAWC,IAAQyD,mBAAxB,iBAGCJ,ICHQK,EAFWvB,aANN,SAACC,GACpB,MAAM,CACLkB,aAAclB,EAAMC,QAAQiB,gBAIJnB,CAAuBiB,GCOlCO,EAbC,WACf,OACC,yBAAK5D,UAAWC,IAAQqC,SACvB,yBAAKtC,UAAWC,IAAQ6B,OAAxB,iBAGA,yBAAK9B,UAAWC,IAAQ4D,YACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,S,wCCRAC,EAA6B,SAACzB,GACjC,MAAO,CACN0B,OAAQ1B,EAAM2B,KAAKD,S,OCFNE,uBDMiB,SAACC,GAAoB,IAC9CC,EAD6C,uKAGjD,OAAKC,KAAK3E,MAAMsE,OAGT,kBAACG,EAAcE,KAAK3E,OAFnB,kBAAC,IAAD,CAAUyD,GAAI,eAJ2B,GACnBmB,IAAMH,WAWtC,OAFqC9B,YAAQ0B,EAAR1B,CAAoC+B,KChB3DF,CAA0BL","file":"static/js/4.4dfafd25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Dialogs_title__3KXQJ\",\"dialogsBox\":\"Dialogs_dialogsBox__3Imc-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allMessages\":\"AllMessages_allMessages__2goAe\",\"title\":\"AllMessages_title__b_VoC\",\"message\":\"AllMessages_message__3DKtw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listMessages\":\"ListMessages_listMessages__qsA1v\",\"sentMessage\":\"ListMessages_sentMessage__1otMG\",\"sender\":\"ListMessages_sender__3WS5H\",\"guess\":\"ListMessages_guess__3pONv\",\"gotMessage\":\"ListMessages_gotMessage__3_c0R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"Contacts_contactsList__v-uN7\",\"contactsListTitle\":\"Contacts_contactsListTitle__2urGm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactUserList\":\"ContactUser_contactUserList__18rQH\",\"contactUserLink\":\"ContactUser_contactUserLink__3kHT5\",\"avatar\":\"ContactUser_avatar__3kTvh\",\"active\":\"ContactUser_active__yAw5O\"};","import React from \"react\";\r\nimport classes from \"./ListMessages.module.css\";\r\nimport {GotMessagesType, SentMessagesType} from \"../../../../../../redux/store\";\r\n\r\n\r\ntype PropsType = {\r\n\tsentMessages: Array<SentMessagesType>\r\n\tgotMessages: Array<GotMessagesType>\r\n}\r\n\r\nconst ListMessages = (props: PropsType) => {\r\n\r\n\tlet sentMessageElement = props.sentMessages.map(t => {\r\n\t\treturn (\r\n\t\t\t<div key={t.id} className={classes.sentMessage}>\r\n\t\t\t\t<p className={classes.sender}>\r\n\t\t\t\t\tYou:<br/>\r\n\t\t\t\t\t{t.text}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\tlet gotMessageElement = props.gotMessages.map(t => {\r\n\t\treturn (\r\n\t\t\t<div key={t.id} className={classes.gotMessage}>\r\n\t\t\t\t<p className={classes.guess}>\r\n\t\t\t\t\t{t.fullName}:<br/>\r\n\t\t\t\t\t{t.text}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className={classes.listMessages}>\r\n\t\t\t{sentMessageElement}\r\n\t\t\t{gotMessageElement}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ListMessages;","import React from \"react\";\r\nimport classes from \"./AllMessages.module.css\";\r\nimport ListMessages from \"./ListMessages/ListMessages\";\r\nimport {\r\n\tGotMessagesType,\r\n\tSentMessagesType\r\n} from \"../../../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {Textarea} from \"../../../../../common/FormsControlls/FormsControlls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../../utils/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype PropsType = {\r\n\tsentMessages: Array<SentMessagesType>\r\n\tgotMessages: Array<GotMessagesType>\r\n\tnewMessageText: string\r\n\taddMessage: (messageValue: string | undefined) => void\r\n}\r\ntype TextAreaType = {\r\n\tnewMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AllMessages = (props: PropsType) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tlet addNewMessage = (formData: TextAreaType) => {\r\n\t\t\tprops.addMessage(formData.newMessageBody)\r\n\t\tdispatch(reset('dialogAddMessageForm'));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.allMessages}>\r\n\t\t\t<div className={classes.title}>\r\n\t\t\t\tWrite your message\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.message}>\r\n\t\t\t\t<AddMessageFormRedux onSubmit={addNewMessage} />\r\n\t\t\t</div>\r\n\t\t\t<ListMessages sentMessages={props.sentMessages}\r\n\t\t\t\t\t\t\t\t\t\tgotMessages={props.gotMessages}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst AddMessageForm : React.FC<InjectedFormProps<TextAreaType>> = (props) => {\r\n\treturn(\r\n\t\t<form onSubmit={props.handleSubmit} className={classes.message}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Field component={Textarea}\r\n\t\t\t\t\t\t\t\t validate={[requiredField,maxLength100]} name={'newMessageBody'} placeholder={'Your message...'}/>\r\n\t\t\t\t\t<button>Send message</button>\r\n\t\t\t\t</div>\r\n\t\t</form >\r\n\t)\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<TextAreaType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default AllMessages;","import React from \"react\";\r\nimport {addMessageActionCreator} from \"../../../../../redux/dialogsReducer\";\r\nimport AllMessages from \"./AllMessages\";\r\nimport {connect} from \"react-redux\";\r\nimport {rootReducers} from \"../../../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state:rootReducers) => {\r\n\treturn {\r\n\t\tgotMessages: state.dialogs.gotMessages,\r\n\t\tnewMessageText: state.dialogs.newMessageText,\r\n\t\tsentMessages: state.dialogs.sentMessages,\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n\treturn {\r\n\t\taddMessage: (messageValue: string | undefined) => {\r\n\t\t\tdispatch(addMessageActionCreator(messageValue))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst AllMessagesContainer = connect(mapStateToProps, mapDispatchToProps)(AllMessages);\r\n\r\nexport default AllMessagesContainer;","import React from \"react\";\r\nimport classes from './ContactUser.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n\tid: number\r\n\tname: string\r\n\tavatarUrl: string\r\n}\r\n\r\nconst ContactUser = (props: PropsType) => {\r\n\treturn (\r\n\t\t<div key={props.id} className={classes.contactUserList}>\r\n\t\t\t<div className={classes.avatar}>\r\n\t\t\t\t<img src={props.avatarUrl} alt=\"\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.contactUser}>\r\n\t\t\t\t<NavLink className={classes.contactUserLink} to={`/dialogs/${props.id}`}\r\n\t\t\t\t\t\t\t\t activeClassName={classes.active}>{props.name}\r\n\t\t\t\t</NavLink>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ContactUser;","import React from \"react\";\r\nimport classes from \"./Contacts.module.css\";\r\nimport ContactUser from \"./ContactUser/ContactUser\";\r\nimport {UserDataType} from \"../../../../../redux/store\";\r\n\r\ntype PropsType = {\r\n\tcontactsData: Array<UserDataType>\r\n}\r\n\r\nconst Contacts = (props: PropsType) => {\r\n\t\t\t\tlet contactElement = props.contactsData.map(c=><ContactUser key={c.id} id={c.id} name={c.name} avatarUrl={c.avatarUrl}/>)\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div className={classes.contactsList}>\r\n\t\t\t\t\t\t<div className={classes.contactsListTitle}>\r\n\t\t\t\t\t\t\tYour contacts\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{contactElement}\r\n\t\t\t\t\t</div>)\r\n}\r\n\r\nexport default Contacts;","import React from \"react\";\r\nimport Contacts from \"./Contacts\";\r\nimport {StateType} from \"../../../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateProps = (state: StateType) => {\r\n\treturn{\r\n\t\tcontactsData: state.dialogs.contactsData\r\n\t}\r\n}\r\n\r\nconst ContactsContainer = connect(mapStateProps)(Contacts)\r\n\r\nexport default ContactsContainer;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport AllMessagesContainer from \"./AllMessages/AllMessagesContainer\";\r\nimport ContactsContainer from \"./Contacts/ContactsContainer\";\r\n\r\nconst Dialogs = () => {\r\n\treturn (\r\n\t\t<div className={classes.dialogs}>\r\n\t\t\t<div className={classes.title}>\r\n\t\t\t\tYour Massages\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.dialogsBox}>\r\n\t\t\t\t<ContactsContainer/>\r\n\t\t\t\t<AllMessagesContainer/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n\treturn {\r\n\t\tisAuth: state.auth.isAuth\r\n\t}\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\tclass RedirectComponent extends React.Component<any, any> {\r\n\t\trender() {\r\n\t\t\tif (!this.props.isAuth) {\r\n\t\t\t\treturn <Redirect to={'/login'}/>\r\n\t\t\t}\r\n\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\tlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\treturn ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {WithAuthRedirect} from \"../../../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport default compose(WithAuthRedirect)(Dialogs)"],"sourceRoot":""}